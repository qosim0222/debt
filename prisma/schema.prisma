// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  fullname  String
  userName  String   @unique
  phone     String   @unique
  adress    String
  image     String?
  password  String
  role      userRole @default(SELLER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Customer Customer[]
  Payment  Payment[]
  Sample   Sample[]
  Message  Message[]
}

model Customer {
  id        String   @id @default(uuid())
  fullname  String
  address   String
  userId    String
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User            @relation(fields: [userId], references: [id])
  CustomerPhone CustomerPhone[]
  CustomerImage CustomerImage[]
  Debt          Debt[]
  Message       Message[]
}

model CustomerPhone {
  id         String   @id @default(uuid())
  customerId String
  phone      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
}

model CustomerImage {
  id         String   @id @default(uuid())
  customerId String
  image      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
}

model Debt {
  id              String   @id @default(uuid())
  customerId      String
  total_amount    Int
  monthly_amount  Int
  deadline_months Int
  paid_amount     Int      @default(0)
  status          Boolean  @default(false) // yopilmagan (so'ndirilmagan)
  startDate       DateTime
  productName     String
  note            String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  customer  Customer    @relation(fields: [customerId], references: [id])
  DebtImage DebtImage[]
  Payment   Payment[]
}

model DebtImage {
  id        String   @id @default(uuid())
  image     String
  debtId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  debt Debt @relation(fields: [debtId], references: [id])
}

model Payment {
  id          String   @id @default(uuid())
  amount      Int
  monthNumber Int? // faqat oylik bo'lib to'lashda to'ldiriladi (1..deadline_months)
  debtId      String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  debt Debt @relation(fields: [debtId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Message {
  id         String    @id @default(uuid())
  customerId String
  userId     String?
  sampleId   String?
  text       String
  status     MsgStatus
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  sample   Sample?  @relation(fields: [sampleId], references: [id])
  user     User?    @relation(fields: [userId], references: [id])
}


model Sample {
  id       String  @id @default(uuid())
  text     String
  userId   String
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User      @relation(fields: [userId], references: [id])
  Message Message[]
}

enum userRole {
  SELLER
  ADMIN
}


enum MsgStatus {
  SENT
  FAILED
}
